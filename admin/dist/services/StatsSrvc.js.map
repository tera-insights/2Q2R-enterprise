{"version":3,"sources":["services/StatsSrvc.ts"],"names":[],"mappings":"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","file":"StatsSrvc.js","sourcesContent":["import * as _ from 'lodash';\nimport 'angular-resource';\n\nexport type MessageHandler = (msgs: any[]) => void;\n\nexport interface Message extends ng.resource.IResource<Message> {\n    __type__: string\n}\n\ntype HandlerMap = { [id: number]: MessageHandler };\ntype TypeMap = { [type: string]: HandlerMap };\n\nclass SubscriptionManager {\n    // main map from type to handlers\n    private typeMap: TypeMap = {\n        __all__: {}\n    };\n    // request IDs to handler unsubscribe\n    private id: number = 0;\n\n    // if @types == null, subscribe to all types\n    subscribe(types: string[], handler: MessageHandler) {\n        // next id\n        this.id++;\n\n        if (!types) {\n            this.typeMap['__all__'][this.id] = handler;\n        } else if (types.length > 0) {\n            types.forEach((type) => {\n                if (!this.typeMap[type])\n                    this.typeMap[type] = {};\n                var grp = this.typeMap[type];\n\n                grp[this.id] = handler;\n            });\n        } else {\n            throw new Error(\"Subscriber must subscribe to at least one message type or provide 'null' to suscribe to all types.\");\n        }\n\n        return this.id;\n    }\n\n    unsubscribe(ids: Array<number>) {\n        for (var grp in this.typeMap) {\n            for (let id in ids) {\n                delete this.typeMap[grp][id];\n            }\n        }\n    }\n\n    process(msgs: Message[]) {\n        let msgGrps = _.groupBy(msgs, '__type__');\n\n        for (let msgType in msgGrps) {\n            let grp: HandlerMap = this.typeMap[msgType];\n\n            for (let id in grp) {\n                grp[id](msgGrps[msgType]);\n            }\n\n            for (let id in this.typeMap['__all__']) {\n                this.typeMap['__all__'][id](msgGrps[msgType]);\n            }\n        }\n    }\n\n}\n\nexport class StatsSrvc {\n\n    private resource: ng.resource.IResourceClass<Message>;\n    private subMngr: SubscriptionManager = new SubscriptionManager();\n\n    public resource = this.$resource(\"/admin/stats/recent\");\n\n    subscribe(types: string[], handler: MessageHandler) {\n        handler(this.resource.query()); // TODO: only give the recent messages for particular types\n        return this.subMngr.subscribe(types, handler);\n    }\n\n    unsubscribe(ids: number[]) {\n        this.subMngr.unsubscribe(ids);\n    }\n\n    static $inject = [\n        '$resource'\n    ];\n\n    constructor(\n        private $resource: ng.resource.IResourceService\n    ) {\n        var ws = new WebSocket('ws://' + window.location.host + '/admin/stats/listen');\n        ws.onmessage = (msg) => {\n            console.log(msg);\n            this.subMngr.process(msg.data);\n        };\n    }\n\n}"]}