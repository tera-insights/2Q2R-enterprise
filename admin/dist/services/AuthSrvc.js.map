{"version":3,"sources":["services/AuthSrvc.ts"],"names":[],"mappings":"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","file":"AuthSrvc.js","sourcesContent":["import 'angular-resource';\nimport { createAuthenticator, createSigner, ExternalKeyPair } from 'p256-auth';\n\n/**************\n * Interfaces *\n **************/\n\ninterface IServerKey {\n    public: string;\n    expires: number;\n}\n\ninterface INonce {\n    nonce: string;\n    expires: number;\n}\n\n/**\n * Service responsible for authentication and maintaining sessions. \n * \n * @author Sam Claus\n * @version 1/18/17\n * @copyright Tera Insights, LLC\n */\nexport class AuthSrvc {\n\n    private resource: any = this.$resource('', { headers: this.authHeaders }, {\n        public: { method: 'GET', url: '/admin/public' },\n        nonce: { method: 'GET', url: '/admin/nonce/:id' }\n    });\n\n    private ephemeralKeyManager = createAuthenticator();\n    private signingKeyManager = createSigner();\n\n    private authHeaders: any;\n    private adminID: string;\n\n    /**\n     * This method prepares first-factor authentication headers for\n     * second factor authentication requests and should be called once\n     * the admin submits their signing key and enters their password.\n     * @param {ExternalKeyPair} key      Signing key from file.\n     * @param {Uint8Array}      password Password from secure field;\n     *                                   used to unwrap @key.\n     * @returns A promise that fulfills when first factor headers have\n     *          been prepared and are available globally from this service.\n     * @throws If the user enters an incorrect password or their key file\n     *         is corrupted or incorrect altogether. The error message will\n     *         explain which error occurred and should be displayed in a toast.\n     */\n    public prepareFirstFactor(key: ExternalKeyPair, id: string, password: Uint8Array): ng.IPromise<void> {\n        let deferred = this.$q.defer<void>();\n        this.adminID = id; // TODO: what is an adminID?\n\n        this.$q.all([\n            this.getServerPublic(),\n            this.getNonce()\n        ]).then(([serverPublic, nonce]) => {\n            Promise.all([\n                this.ephemeralKeyManager.generateKeyPair(),\n                this.ephemeralKeyManager.importServerKey(serverPublic.public),\n                this.signingKeyManager.importKey(key, password)\n            ]).then(() => {\n                this.ephemeralKeyManager.getPublic().then(ephemeralPublic => {\n                    this.signingKeyManager.sign(ephemeralPublic, 'base64URL').then(signature => {\n                        this.authHeaders = {\n                            'X-Authentication-Type': 'admin-frontend',\n                            'X-Public-Key': ephemeralPublic,\n                            'X-Public-Signature': signature\n                        };\n                        deferred.resolve();\n                    });\n                });\n            });\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Because an HMAC signature must be computed for every message,\n     * the authentication headers will change with every request to the\n     * server. This method modifies the headers each time based upon the\n     * given message. Call this method only once `prepareFirstFactor()`\n     * has been called.\n     * @param {any} message Request needing authentication.\n     * @returns A promise fulfilling with a headers object.\n     */\n    public getAuthHeaders(message: any): ng.IPromise<any> {\n        let deferred = this.$q.defer<any>();\n        let msgString = JSON.stringify(message);\n\n        this.getNonce().then(nonce => {\n            this.ephemeralKeyManager.computeHMAC(msgString).then(hmac => {\n                this.authHeaders['X-Nonce'] = nonce.nonce;\n                this.authHeaders['X-authentication'] = this.adminID + ':' + hmac;\n                deferred.resolve(this.authHeaders);\n            });\n        });\n\n        return deferred.promise;\n    }\n\n    private getServerPublic(): ng.IPromise<IServerKey> {\n        return this.resource.public().$promise;\n    }\n\n    private getNonce(): ng.IPromise<INonce> {\n        return this.resource.nonce({ id: this.adminID }).$promise;\n    }\n\n    static $inject = [\n        '$resource',\n        '$q'\n    ];\n\n    constructor(\n        private $resource: ng.resource.IResourceService,\n        private $q: ng.IQService\n    ) { }\n}\n\n"]}