{"version":3,"sources":["controllers/MainCtrl.ts"],"names":[],"mappings":";;AACA,sDAAqD;AAQrD;IAwGI,kBACY,UAAuC,EACvC,MAAgC,EAChC,SAAqC,EACrC,QAAkB;QAHlB,eAAU,GAAV,UAAU,CAA6B;QACvC,WAAM,GAAN,MAAM,CAA0B;QAChC,cAAS,GAAT,SAAS,CAA4B;QACrC,aAAQ,GAAR,QAAQ,CAAU;QA3GtB,UAAK,GAAW,EAAE,CAAC;QAGnB,eAAU,GAAkB;YAChC;gBACI;oBAEI,KAAK,EAAE,gBAAgB;oBAEvB,IAAI,EAAE,WAAW;oBAEjB,IAAI,EAAE,wBAAwB;iBACjC;gBACD;oBACI,KAAK,EAAE,YAAY;oBACnB,IAAI,EAAE,gBAAgB;oBACtB,IAAI,EAAE,qBAAqB;iBAC9B;gBACD;oBACI,KAAK,EAAE,WAAW;oBAClB,IAAI,EAAE,cAAc;oBACpB,IAAI,EAAE,eAAe;iBACxB;gBACD;oBACI,KAAK,EAAE,cAAc;oBACrB,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,gBAAgB;iBACzB;gBACD;oBACI,KAAK,EAAE,YAAY;oBACnB,IAAI,EAAE,OAAO;oBACb,IAAI,EAAE,iBAAiB;iBAC1B;gBACD;oBACI,KAAK,EAAE,UAAU;oBACjB,IAAI,EAAE,aAAa;oBACnB,IAAI,EAAE,wBAAwB;iBACjC;gBACD;oBACI,KAAK,EAAE,cAAc;oBACrB,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,wBAAwB;iBACjC;gBACD;oBACI,KAAK,EAAE,eAAe;oBACtB,IAAI,EAAE,UAAU;oBAChB,IAAI,EAAE,kBAAkB;iBAC3B;gBACD;oBACI,KAAK,EAAE,OAAO;oBACd,IAAI,EAAE,QAAQ;oBACd,IAAI,EAAE,wBAAwB;iBACjC;aACJ;SACJ,CAAC;QAuDE,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;IAC/C,CAAC;IA5CD,yBAAM,GAAN,UAAO,KAAa,EAAE,IAAY,EAAE,IAAY;QAC5C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAGlB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QAGtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAGvB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC;IAED,6BAAU,GAAV;QACI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC;IAED,2BAAQ,GAAR;QACI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAChB,UAAU,EAAE,2BAAY;YACxB,YAAY,EAAE,MAAM;YACpB,WAAW,EAAE,4BAA4B;YACzC,mBAAmB,EAAE,IAAI;SAC5B,CAAC,CAAC,IAAI,CAAC;QAER,CAAC,EAAE;QAEH,CAAC,CAAC,CAAC;IACP,CAAC;IAiBL,eAAC;AAAD,CAjHA,AAiHC;AAfU,gBAAO,GAAG;IACb,YAAY;IACZ,QAAQ;IACR,WAAW;IACX,UAAU;CACb,CAAC;AAvGO,4BAAQ","file":"MainCtrl.js","sourcesContent":["import { AuthSrvc } from '../services/AuthSrvc';\nimport { GenerateCtrl } from './modals/GenerateCtrl';\n\ninterface IMenuItem {\n    state: string; // State corresponding to the menu item\n    name: string; // This is the displayable name of the menu\n    icon: string; // icon name. Assumed to be in /img/icons\n}\n\nexport class MainCtrl {\n    private sName: string = \"\";\n\n    // controls what the main left menu displays, in main.html\n    private menuGroups: IMenuItem[][] = [\n        [\n            {\n                // what state it redirects to\n                state: \"main.dashboard\",\n                // The text that shows up next to the icon\n                name: \"Dashboard\",\n                // the icon, lights up with a color if clicked\n                icon: \"mdi mdi-view-dashboard\"\n            },\n            {\n                state: \"main.admin\",\n                name: \"Administrators\",\n                icon: \"mdi mdi-certificate\"\n            },\n            {\n                state: \"main.apps\",\n                name: \"Applications\",\n                icon: \"mdi mdi-cloud\"\n            },\n            {\n                state: \"main.servers\",\n                name: \"Servers\",\n                icon: \"mdi mdi-server\"\n            },\n            {\n                state: \"main.users\",\n                name: \"Users\",\n                icon: \"mdi mdi-account\"\n            },\n            {\n                state: \"main.2FA\",\n                name: \"2FA Devices\",\n                icon: \"mdi mdi-cellphone-link\"\n            },\n            {\n                state: \"main.reports\",\n                name: \"Reports\",\n                icon: \"mdi mdi-clipboard-text\"\n            },\n            {\n                state: \"main.settings\",\n                name: \"Settings\",\n                icon: \"mdi mdi-settings\"\n            },\n            {\n                state: \"login\",\n                name: \"Logout\",\n                icon: \"mdi mdi-logout-variant\"\n            }\n        ]    \n    ];\n\n    /**\n     * Select a sub-view \n     * \n     * @param {string} route This is the route to switch to\n     * @param {string} name This is the name of the state to display\n    */\n\n    // a variable that manages the active navigator\n    // is then set based on clicked menuitem \n    private activeMenu: string;\n\n    select(route: string, name: string, menu: string) {\n        this.sName = name;\n            \n        // go to the selected state    \n        this.$state.go(route);\n\n        // set the active item\n        this.activeMenu = menu;\n\n        // and toggle the sidenav\n        this.$mdSidenav('left').toggle();\n    }\n\n    toggleLeft() {\n        this.$mdSidenav('left').toggle();\n    }\n\n    generate() {\n        this.$mdDialog.show({\n            controller: GenerateCtrl,\n            controllerAs: 'cMod',\n            templateUrl: 'views/modals/Generate.html',\n            clickOutsideToClose: true\n        }).then(() => {\n            // Yey. Generation succesful\n        }, () => {\n            // TODO: Add notifications\n        });\n    }\n\n    static $inject = [\n        '$mdSidenav',\n        '$state',\n        '$mdDialog',\n        'AuthSrvc'\n    ];\n    constructor(\n        private $mdSidenav: ng.material.ISidenavService,\n        private $state: angular.ui.IStateService,\n        private $mdDialog: ng.material.IDialogService,\n        private AuthSrvc: AuthSrvc\n    ) {\n        this.toggleLeft();\n        this.select(\"main.dashboard\", \"Dashboard\");\n    }\n}"]}