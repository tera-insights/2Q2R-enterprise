{"version":3,"sources":["controllers/LoginCtrl.ts"],"names":[],"mappings":";;AACA,sDAAqD;AAGrD;IAiDI,mBACY,QAAkB,EAClB,SAA0C,EAC1C,QAAwC;QAFxC,aAAQ,GAAR,QAAQ,CAAU;QAClB,cAAS,GAAT,SAAS,CAAiC;QAC1C,aAAQ,GAAR,QAAQ,CAAgC;QAjD5C,aAAQ,GAAe,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;IAkD/C,CAAC;IA5CJ,oCAAgB,GAAhB,UAAiB,IAAU;QAA3B,iBAMC;QALG,IAAI,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;QAClC,UAAU,CAAC,MAAM,GAAG,UAAC,KAAK;YACtB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAE,KAAK,CAAC,MAAc,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC,CAAC;QACF,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAQD,yBAAK,GAAL,UAAM,MAAc;QAChB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7E,CAAC;IAKD,4BAAQ,GAAR;QAAA,iBAWC;QAVG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAChB,UAAU,EAAE,2BAAY;YACxB,YAAY,EAAE,MAAM;YACpB,WAAW,EAAE,4BAA4B;YACzC,mBAAmB,EAAE,IAAI;SAC5B,CAAC,CAAC,IAAI,CAAC;YACJ,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,0EAA0E,CAAC,CAAC;QACzG,CAAC,EAAE;YACC,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACP,CAAC;IAcL,gBAAC;AAAD,CAvDA,AAuDC;AAZU,iBAAO,GAAG;IACb,UAAU;IACV,WAAW;IACX,UAAU;CACb,CAAC;AA/CO,8BAAS","file":"LoginCtrl.js","sourcesContent":["import { AuthSrvc } from '../services/AuthSrvc';\nimport { RegisterCtrl } from './modals/RegisterCtrl';\nimport { ExternalKeyPair } from 'p256-auth';\n\nexport class LoginCtrl {\n\n    private signingKey: ExternalKeyPair;\n    private password: Uint8Array = new Uint8Array(50);\n\n    /**\n     * Upload the admin's signing key for primary authentication.\n     * @param {File} file The signing key file (JSON).\n     */\n    uploadSigningKey(file: File) {\n        let fileReader = new FileReader();\n        fileReader.onload = (event) => {\n            this.signingKey = JSON.parse((event.target as any).result);\n        };\n        fileReader.readAsText(file);\n    }\n\n    /**\n     * Makes a call to the authentication service with the user's input\n     * credentials, resulting in the creation of first-factor headers if\n     * a valid key file is uploaded and the password is correct.\n     * @param {string} userID The input username.\n     */\n    login(userID: string) {\n        this.AuthSrvc.prepareFirstFactor(this.signingKey, userID, this.password);\n    }\n\n    /**\n     * Opens a prompt for the first half of a new admin registration.\n     */\n    register() {\n        this.$mdDialog.show({\n            controller: RegisterCtrl,\n            controllerAs: 'cMod',\n            templateUrl: 'views/modals/Register.html',\n            clickOutsideToClose: true\n        }).then(() => {\n            this.$mdToast.showSimple('Registration request saved. Email it to your superadmin to get approved.');\n        }, () => {\n            this.$mdToast.showSimple('Registration canceled.');\n        });\n    }\n\n    static $inject = [\n        'AuthSrvc',\n        '$mdDialog',\n        '$mdToast'\n    ];\n\n    constructor(\n        private AuthSrvc: AuthSrvc,\n        private $mdDialog: angular.material.IDialogService,\n        private $mdToast: angular.material.IToastService\n    ) {}\n\n}"]}