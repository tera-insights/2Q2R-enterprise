{"version":3,"sources":["controllers/ServersCtrl.ts"],"names":[],"mappings":"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","file":"ServersCtrl.js","sourcesContent":["import * as _ from 'lodash';\nimport { ServerSrvc, IServerItem, IServerResource } from '../services/ServerSrvc';\nimport { AppSrvc, IAppItem, IAppResource } from '../services/AppSrvc';\nimport { DeleteServersCtrl } from './modals/DeleteServersCtrl';\nimport 'angular-resource';\nimport 'angular-material';\n\ninterface IServerExtendedItem extends IServerItem {\n    appName?: string;\n    userCount?: number;\n}\n\nexport class ServersCtrl {\n    private Server: IServerResource;\n    private servers: IServerExtendedItem[];\n    private App: IAppResource;\n    private apps: IAppItem[];\n\n    private appsByID: { [appID: string]: IAppItem } = {};\n    private selectedServers: IServerExtendedItem[] = [];\n    private filteredServers: IServerExtendedItem[] = [];\n\n    // These correspond to the different filter types indicated by the drop-down.\n    private filterProperty: 'serverName' | 'appName' | 'userCount';\n    private filters: { [att: string]: any } = {\n        \"serverName\": {\n            type: \"string\",\n            name: \"Server Name\"\n        },\n        \"appName\": {\n            type: \"string\",\n            name: \"Application Name\"\n        },\n        \"userCount\": {\n            type: \"number\",\n            name: \"User Count\"\n        }\n    }\n\n    // These correspond to the actual filter values the user inputs.\n    private maxUsers: number = 0;\n    private filterString: string = \"\";\n    private caseSensitive: boolean = false;\n    private filterRange: { min: number, max: number } = { min: 0, max: 0 };\n\n    private orderBy: string;\n    private state: 'searchClosed' | 'searchOpen' = 'searchClosed';\n    private serverFilter: string;\n    private appFilter: string;\n    private pagination = {\n        pageLimit: 11,\n        page: 1\n    }\n\n    // Aux datascructures to organize Apps and Servers\n    private serversByAppID: { [appID: string]: IServerItem[] } = {};\n\n    updateServer(server: IServerItem) {\n\n    }\n\n    deleteSelected() {\n        this.$mdDialog.show({\n            controller: DeleteServersCtrl,\n            controllerAs: 'cMod',\n            templateUrl: 'views/modals/DeleteServers.html',\n            clickOutsideToClose: true\n        }).then(() => {\n            // TODO: delete selected apps\n            this.$mdToast.showSimple('Deleted ' + this.selectedServers.length + ' ' + (this.selectedServers.length > 1 ? 'servers' : 'server') + '!');\n        }, () => {\n            // user canceled, do nothing\n        });\n    }\n\n    applyFilters() {\n        console.log(this.filterProperty)\n        var filterFct: (IServerExtendedItem) => boolean;\n        var filterObj = this.filters[this.filterProperty];\n        if (filterObj) {\n            switch (filterObj.type) {\n                case \"string\":\n                    filterFct = (server: IServerExtendedItem): boolean => {\n                        var serverProperty = server[this.filterProperty] as string;\n                        serverProperty = serverProperty ? serverProperty : \"\"; // TODO: every server should have every required property\n                        return (this.caseSensitive ? serverProperty : serverProperty.toLowerCase()).includes(this.caseSensitive ? this.filterString : this.filterString.toLowerCase());\n                    };\n                    break;\n                case \"number\":\n                    filterFct = (server: IServerExtendedItem): boolean => {\n                        var val = server[this.filterString];\n                        return (val >= this.filterRange.min) &&\n                            (val <= this.filterRange.max);\n                    };\n                    break;\n\n                default:  // Cannot apply this, return true\n                    filterFct = (server: IServerExtendedItem): boolean => {\n                        return true;\n                    };\n            }\n            this.filteredServers = this.servers.filter(filterFct);\n        } else {\n            this.filteredServers = this.servers;\n        }\n    }\n\n    // Get all the info from backend again\n    refresh() {\n        console.log(\"Refreshed servers!\");\n        this.servers = <IServerExtendedItem[]>this.Server.query();\n        this.apps = this.App.query();\n\n        this.$q.all([\n            this.servers.$promise,\n            this.apps.$promise\n        ]).then(() => {\n            this.appsByID = _.keyBy(this.apps, 'appID');\n            this.servers.forEach((server: IServerExtendedItem) => {\n                if (server.userCount && server.userCount > this.maxUsers) {\n                    this.maxUsers = server.userCount;\n                    this.filterRange.max = this.maxUsers;\n                }\n\n                var app = this.appsByID[server.appID];\n                if (app) {\n                    server.appName = app.appName;\n                }\n                server.userCount = 0; // TODO: remove, we need to actually query user count for each server correctly\n            });\n            this.applyFilters();\n        })\n    }\n\n    static $inject = [\n        '$q',\n        '$mdDialog',\n        '$mdToast',\n        'AppSrvc',\n        'ServerSrvc'\n    ];\n    \n    constructor(\n        private $q: ng.IQService,\n        private $mdDialog: ng.material.IDialogService,\n        private $mdToast: ng.material.IToastService,\n        private AppSrvc: AppSrvc,\n        private ServerSrvc: ServerSrvc\n    ) {\n        this.App = AppSrvc.resource;\n        this.Server = ServerSrvc.resource;\n        this.refresh();\n    }\n\n}"]}