{"version":3,"sources":["controllers/modals/RegisterCtrl.ts"],"names":[],"mappings":";;AACA,uCAAgD;AAChD,4BAA0B;AAC1B,sCAAyC;AAQzC;IAoDI,sBACY,SAAqC;QAArC,cAAS,GAAT,SAAS,CAA4B;QApDzC,yBAAoB,GAAa;YACrC,UAAU;YACV,cAAc;YACd,WAAW;SACd,CAAC;QAEM,iBAAY,GAAqB;YACrC,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,EAAE;YACT,QAAQ,EAAE,EAAE;YACZ,EAAE,EAAE,SAAS;YACb,IAAI,EAAE,SAAS;YACf,SAAS,EAAE,SAAS;SACvB,CAAC;QAEM,aAAQ,GAAe,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;QAuC9C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC;IAjCD,6BAAM,GAAN;QAAA,iBAiBC;QAhBG,IAAI,aAAa,GAAG,+BAAmB,EAAE,CAAC;QAE1C,aAAa,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC;YACjC,OAAO,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,KAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,EAAgB;oBAAf,cAAM,EAAE,cAAM;gBAClG,KAAI,CAAC,YAAY,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;gBACjC,KAAI,CAAC,YAAY,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;gBACrC,KAAI,CAAC,YAAY,CAAC,SAAS,GAAG,MAAM,CAAC;gBAErC,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC,CAAC;gBAC/F,IAAI,OAAO,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAI,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,yBAAyB,EAAE,CAAC,CAAC;gBAE1G,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBACrC,SAAS,CAAC,MAAM,CAAC,OAAO,EAAE,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;gBAC7E,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YAC1B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAKD,6BAAM,GAAN;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAUL,mBAAC;AAAD,CAzDA,AAyDC;AARU,oBAAO,GAAG;IACb,WAAW;CACd,CAAC;AAnDO,oCAAY","file":"RegisterCtrl.js","sourcesContent":["import { INewAdminRequest } from '../../interfaces/rest';\nimport { createAuthenticator } from 'p256-auth';\nimport 'angular-material';\nimport FileSaver = require('file-saver');\n\n/**\n * Controller for the registration modal. \n * \n * @export\n * @class RegisterCtrl\n */\nexport class RegisterCtrl {\n    private availablePermissions: string[] = [\n        'Register',\n        'Authenticate',\n        'Analytics'\n    ];\n\n    private registration: INewAdminRequest = {\n        name: '',\n        email: '',\n        adminFor: '',\n        iv: undefined,\n        salt: undefined,\n        publicKey: undefined\n    };\n\n    private password: Uint8Array = new Uint8Array(50);\n\n    /**\n     * Finishes off the registration by generating and saving\n     * a key pair, as well as the completed registration request\n     * for approval by an admin. Closes the modal.\n     */\n    accept() {\n        let authenticator = createAuthenticator();\n        \n        authenticator.generateKeyPair().then(() => {\n            Promise.all([authenticator.exportKey(this.password), authenticator.getPublic()]).then(([extKey, pubKey]) => {\n                this.registration.iv = extKey.iv;\n                this.registration.salt = extKey.salt;\n                this.registration.publicKey = pubKey;\n\n                let keyFile = new Blob([JSON.stringify(extKey, null, 2)], { type: 'text/json;charset=utf-8' });\n                let regFile = new Blob([JSON.stringify(this.registration, null, 2)], { type: 'text/json;charset=utf-8' });\n\n                FileSaver.saveAs(keyFile, 'Key.1fa');\n                FileSaver.saveAs(regFile, this.registration.name.replace(' ', '_') + '.arr');\n                this.$mdDialog.hide();\n            });\n        });\n    }\n\n    /**\n     * Cancel all the actions\n     */\n    cancel() {\n        this.$mdDialog.cancel();\n    }\n\n    static $inject = [\n        '$mdDialog'\n    ];\n    constructor(\n        private $mdDialog: ng.material.IDialogService\n    ) {\n        console.log(this.password[0]);\n    }\n}"]}