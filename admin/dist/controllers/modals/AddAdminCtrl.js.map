{"version":3,"sources":["controllers/modals/AddAdminCtrl.ts"],"names":[],"mappings":";;AAGA,4BAA0B;AAS1B;IAyDI,sBACY,SAAqC,EACrC,SAAoB;QADpB,cAAS,GAAT,SAAS,CAA4B;QACrC,cAAS,GAAT,SAAS,CAAW;QAvDxB,yBAAoB,GAAa;YACrC,UAAU;YACV,cAAc;YACd,WAAW;SACd,CAAC;IAqDF,CAAC;IA/CD,yCAAkB,GAAlB,UAAmB,IAAU;QAA7B,iBAMC;QALG,IAAI,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;QAClC,UAAU,CAAC,MAAM,GAAG,UAAC,KAAK;YACtB,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAE,KAAK,CAAC,MAAc,CAAC,MAAM,CAAC,CAAC;QACjE,CAAC,CAAC;QACF,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAQD,gCAAS,GAAT,UAAU,IAAU;IAEpB,CAAC;IAOD,6BAAM,GAAN;QAAA,iBAMC;QALG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YAC/C,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QAC1B,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,KAAK;YACV,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACP,CAAC;IAKD,6BAAM,GAAN;QACI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAYL,mBAAC;AAAD,CA9DA,AA8DC;AAVU,oBAAO,GAAG;IACb,WAAW;IACX,WAAW;CACd,CAAC;AAvDO,oCAAY","file":"AddAdminCtrl.js","sourcesContent":["import { AdminSrvc } from '../../services/AdminSrvc';\nimport { INewAdminRequest } from '../../services/AdminSrvc';\nimport { ExternalKeyPair, createAuthenticator } from 'p256-auth';\nimport 'angular-material';\n\n/**\n * Admin registration modal controller.\n * \n * @author Sam Claus\n * @version 1/12/17\n * @copyright Tera Insights, LLC\n */\nexport class AddAdminCtrl {\n    private registration: INewAdminRequest;\n    private adminKey: ExternalKeyPair\n\n    private availablePermissions: string[] = [\n        'Register',\n        'Authenticate',\n        'Analytics'\n    ];\n\n    /**\n     * Upload the registering admin's registration file.\n     * @param {File} file The registration file (JSON).\n     */\n    uploadRegistration(file: File) {\n        let fileReader = new FileReader();\n        fileReader.onload = (event) => {\n            this.registration = JSON.parse((event.target as any).result);\n        };\n        fileReader.readAsText(file);\n    }\n\n    /**\n     * The referring admin must upload their key so it\n     * can be used to sign the registering admin's public\n     * key.\n     * @param {File} file The signing key file (JSON).\n     */\n    uploadKey(file: File) {\n\n    }\n\n    /**\n     * Send the new admin registration to the server. The modal\n     * then either returns void, or an error if something went\n     * wrong with the registration.\n     */\n    accept() {\n        this.AdminSrvc.create(this.registration).then(reply => {\n            this.$mdDialog.hide();\n        }).catch(error => {\n            this.$mdDialog.hide(error);\n        });\n    }\n\n    /**\n     * Cancel the registration.\n     */\n    cancel() {\n        this.$mdDialog.cancel();\n    }\n\n    static $inject = [\n        '$mdDialog',\n        'AdminSrvc'\n    ];\n\n    constructor(\n        private $mdDialog: ng.material.IDialogService,\n        private AdminSrvc: AdminSrvc\n    ) {\n    }\n}"]}